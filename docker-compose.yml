version: '3.8'

services:
  app1: &app
    build:
      context: .
      dockerfile: Dockerfile
    hostname: app1
    networks:
      - backend
      - payment-processor
    ports:
      - "8003:8080"
    environment:
      - APP_PORT=8080
      - PROCESSOR_DEFAULT_URL=http://payment-processor-default:8080
      - PROCESSOR_FALLBACK_URL=http://payment-processor-fallback:8080
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable
      - RABBITMQ_CONNECTION_URL=amqp://user:password@rabbitmq:5672
      - NATS_URL=nats://nats:4222
    depends_on:
      postgres:
        condition: service_healthy
      # nats:
      #   condition: service_healthy
    volumes:
      - rinha-store:/data
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "40MB"

  app2:
    <<: *app
    hostname: app2
    ports:
      - "8004:8080"
    environment:
      - APP_PORT=8080
      - PROCESSOR_DEFAULT_URL=http://payment-processor-default:8080
      - PROCESSOR_FALLBACK_URL=http://payment-processor-fallback:8080
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable
      - RABBITMQ_CONNECTION_URL=amqp://user:password@rabbitmq:5672
      - NATS_URL=nats://nats:4222

  app3:
    <<: *app
    hostname: app3
    ports:
      - "8005:8080"
    environment:
      - APP_PORT=8080
      - PROCESSOR_DEFAULT_URL=http://payment-processor-default:8080
      - PROCESSOR_FALLBACK_URL=http://payment-processor-fallback:8080
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable
      - RABBITMQ_CONNECTION_URL=amqp://user:password@rabbitmq:5672
      - NATS_URL=nats://nats:4222

  app4:
    <<: *app
    hostname: app4
    ports:
      - "8006:8080"
    environment:
      - APP_PORT=8080
      - PROCESSOR_DEFAULT_URL=http://payment-processor-default:8080
      - PROCESSOR_FALLBACK_URL=http://payment-processor-fallback:8080
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable
      - RABBITMQ_CONNECTION_URL=amqp://user:password@rabbitmq:5672
      - NATS_URL=nats://nats:4222

  nginx:
    image: nginx:latest
    ports:
      - "9999:9999"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - backend
    depends_on:
      - app1
      - app2
      - app3
      - app4
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: "15MB"

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "148MB"

  # rabbitmq:
  #   image: rabbitmq:3-management
  #   container_name: rabbitmq
  #   hostname: rabbitmq
  #   ports:
  #     - "5672:5672"
  #     - "15672:15672"
  #   volumes:
  #     - rabbitmq_data:/var/lib/rabbitmq
  #   networks:
  #     - backend
  #   environment:
  #     RABBITMQ_DEFAULT_USER: user
  #     RABBITMQ_DEFAULT_PASS: password
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
  #     interval: 5s
  #     timeout: 10s
  #     retries: 5
    # deploy:
    #   resources:
    #     limits:
    #       cpus: "0.40"
    #       memory: "150MB"

  nats:
    image: nats:latest
    ports:
      - "4222:4222" # Client port
      - "8222:8222" # HTTP management port
      - "6222:6222" # Clustering port (if applicable for clustering)
    command: -js # Optional: Enable JetStream for persistence and advanced messaging
    volumes:
      - nats_data:/data # Optional: Persist JetStream data to a named volume
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: "20MB"
    # healthcheck:
    #   test: ["CMD", "nats", "server", "check", "--server", "nats://localhost:4222"]
    #   start_period: 3s
    #   retries: 3
    #   timeout: 3s
    #   interval: 14s

volumes:
  postgres_data:
  rinha-store:
  rabbitmq_data:
  nats_data:

networks:
  backend:
    driver: bridge
  payment-processor:
    external: true